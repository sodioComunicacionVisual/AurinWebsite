{
  "name": "Company Website Chatbot Agent (RAG, Calendar integrations)",
  "nodes": [
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini",
          "cachedResultName": "gpt-4o-mini"
        },
        "options": {}
      },
      "id": "c720eaaf-0fb0-402d-a9c1-c503bd4a919d",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        1696,
        1072
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "XXl9qS4splZaD3VC",
          "name": "n8n free OpenAI API credits"
        }
      }
    },
    {
      "parameters": {
        "name": "calendarAgent",
        "description": "Call this tool for any calendar action.",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "LpmYLHWdvevdwt5e",
          "cachedResultName": "Calendar Agent"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "b8992569-06c1-4ebb-8fbe-e3f5ea91c00b",
      "name": "calendarAgent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        2624,
        1104
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "name": "RAGagent",
        "description": "=Call this tool to get answers for FAQs regarding Kamexa. \nThe input should always be the question you want answered along with the following sessionId - {{ $('Code in JavaScript').item.json.sessionId }}",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "IkEdDr98G9p54XDT",
          "cachedResultName": "RAG Agent"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "e5f6d811-75ac-48ef-b891-a94732f01f01",
      "name": "RAGagent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        2432,
        1184
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "name": "ticketAgent",
        "description": "Call this tool to create a support ticket for a human agent to followup on via email. \n\nThe input should be the users name and email address and a snippet of the users request. ",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "tMyGGwgRHFuqYKg3",
          "cachedResultName": "Ticket Agent"
        },
        "workflowInputs": {
          "value": {},
          "schema": [],
          "mappingMode": "defineBelow",
          "matchingColumns": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "id": "5a3275cb-0953-4ea5-ae23-557edd26f9d4",
      "name": "ticketAgent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        2176,
        1232
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "contextWindowLength": 10
      },
      "id": "d2044a89-2823-4590-93b5-d4913b20c571",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        1936,
        1152
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "content": "# Website Chatbot Agent with Modular Sub-Agent Architecture\n\n#### Overview \nThis workflow implements a modular **Website AI Chatbot Assistant** capable of handling multiple types of customer interactions autonomously. Instead of relying on a single large agent to handle all logic and tools, this system routes user queries to specialized sub-agents—each dedicated to a specific function.\n\n By using a manager-style orchestration layer, this approach prevents overloading a single AI model with excessive context, leading to cleaner routing, faster execution, and easier scaling as your automation needs grow.\n\n\n#### How It Works\n\n**1. Chat Trigger**  \n- The flow is initiated when a chat message is received via the website widget.\n\n**2. Manager Agent (Ultimate Website AI Assistant)**  \n- The central LLM-based agent is responsible for parsing the message and deciding which specialized sub-agent to route it to.\n- It uses an OpenAI GPT model for natural language understanding and a lightweight memory system to preserve recent context.\n\n**3. Sub-Agent Routing**  \n- `calendarAgent`: Handles availability checks and books meetings on connected calendars.  \n- `RAGAgent`: Searches company documentation or FAQs to provide accurate responses from your internal knowledge base.  \n- `ticketAgent`: Forwards requests to human support by generating and sending support tickets to a designated email.\n\n---\n\n#### Setup Instructions\n\n1. **Embed the Chatbot**  \n   - Use a custom HTML widget or script to embed the chatbot interface on your website.  \n   - Connect the frontend to the webhook that triggers the `When chat message received` node.\n\n2. **Configure Your OpenAI Key**  \n   - Insert your API key in the `OpenAI Chat Model` node.  \n   - Adjust the model parameters for temperature, max tokens, etc., based on how formal or creative you want the bot to be.\n\n3. **Customize Sub-Agents**  \n   - `calendarAgent`: Connect to your Google or Outlook calendar.  \n   - `RAGAgent`: Link to a vector store or document database via API or native integration.  \n   - `ticketAgent`: Set the destination email and format for ticket generation (e.g. via SendGrid or SMTP).\n\n4. **Deploy in Production**  \n   - Host on n8n Cloud or your self-hosted instance.  \n   - Monitor usage through the Executions tab and refine prompts based on user behavior.\n\n---\n\n#### Benefits\n\n- Modular system with dedicated logic per function  \n- Reduces token bloat by offloading complexity to sub-agents  \n- Easy to scale by adding more tools (e.g. CRM, analytics)  \n- Fast and responsive user experience for customers on your site  \n- Cleaner code structure and easier debugging\n",
        "height": 1480,
        "width": 660
      },
      "id": "a80e06be-cbe1-42c0-a293-772859044956",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -368,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are Dan Bot, the helpful, friendly chatbot assistant for Marketing Ladder, a marketing agency. You don’t answer questions yourself, you send every request to the right tool. \n\nAvailable Tools\nRAGagent – Use to answer FAQs and anything about Marketing Ladder.\ncalendarAgent – Use to check availability and book consultations.\nticketAgent – Use when the user wants a human, you don’t have enough info, or you can’t complete the request.\n\n\nCore Capabilities\n1. Answer FAQs\nIf a user asks a question, immediately query the RAGagent.\nNever guess, improvise, or answer on your own.\nNo tool call = no answer.\n\n2. Book Consultations\nIf a user wants to book a consultation, collect the following information:\nFull name, Company Name, Email address, their goal for the consultation, preferred day and time (remember: Chicago timezone, 30-min meetings)\n\nProcess:\n-Check their preferred slot with calendarAgent.\n-If unavailable, offer the closest alternate available times on the same day. \n-Once they pick a slot, confirm all details (name, email, goal, time).\n-After confirmation, use calendarAgent to book and send them confirmation.\nGolden Rule: Never double book. Always check availability first.\n\n3. Escalate to a Human Agent if any of these happen:\n\n-RAGagent can’t find an answer\n-User wants to talk to a human\n-You can’t complete their request\n\nThen:\nAsk if they’d like to be contacted by a human agent. If yes, collect:\nFirst name, Email address, Description of their issue or question\nThen, use ticketAgent to create a support ticket.\n\nRules of Engagement:\n-No improvisation. Tools only.\n-Always clarify if info is missing or unclear.\n-The current date is {{ $now.format('yyyy-MM-dd') }}. You are in the Chicago timezone. Always confirm this when talking about times.\n-Redirect trolls. If someone derails the convo away from Marketing Ladder, steer them back or offer to escalate to a human.\n-Have a friendly, conversational tone of voice, but stick to the point.\n-Default CTA: Always try to book them in for a consultation. That’s your north star.\n"
        }
      },
      "id": "b74b0e7f-91c5-4b9f-97e3-1180c97a1c30",
      "name": "Ultimate Website Chatbot Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2048,
        688
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/chatbot",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        1312,
        688
      ],
      "id": "e1b8a219-5433-478f-afb5-28b58c207937",
      "name": "Webhook",
      "webhookId": "f18aca18-5ade-4c75-ab64-1496a980b445"
    },
    {
      "parameters": {
        "jsCode": "const message = $json.body.message;\nconst sessionId = $json.body.sessionId;\nconst metadata = $json.body.metadata || {};\n\n// Formatear para el AI Agent\nreturn [{\n  json: {\n    chatInput: message,\n    sessionId: sessionId,\n    action: \"sendMessage\",\n    metadata: metadata\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1632,
        688
      ],
      "id": "12955260-5ae2-4832-9255-9a3d3b88adc3",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"output\": \"={{ $json.output }}\",\n  \"sessionId\": \"={{ $('Code in JavaScript').item.json.sessionId }}\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2432,
        688
      ],
      "id": "1cb2a819-c73c-4fd8-9d62-52f1ede45264",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {},
  "connections": {
    "RAGagent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "ticketAgent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "calendarAgent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ultimate Website Chatbot Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "b5676c24-1b8d-4a79-9885-b336912d1b42",
  "meta": {
    "templateId": "6290",
    "instanceId": "473b8e2f44c2c249c630a674e0ffd242a718055278d7a389908825386c510f30"
  },
  "id": "0CJLjczFY3FF4Bk9",
  "tags": []
}