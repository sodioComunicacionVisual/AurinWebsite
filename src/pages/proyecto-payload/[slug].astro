---
import Layout from '../../layouts/Layout.astro';
import Template from '../../components/sections/projects/template/Template.astro';
import { PayloadAPI, type PayloadProject, getImageUrl } from '../../lib/payload';
import { getLangFromUrl } from '../../i18n/utils';
import { translations } from '../../i18n/translations';

export const prerender = false;

// Fetch project dynamically on each request
const { slug } = Astro.params;
let project: PayloadProject | null = null;
const locale = 'es';

try {
  const projects = await PayloadAPI.getProjects('es');
  project = projects.find(p => p.slug === slug) || null;
} catch (error) {
  console.error('❌ Error fetching project:', error);
}

// Detect current language
const currentLang = getLangFromUrl(Astro.url) || locale;
const t = translations[currentLang];

// Fallback data in case project is not found
const exampleData = {
  projectTitle: "Proyecto de Ejemplo",
  projectCategories: ["Diseño UX/UI", "Desarrollo Web"],
  projectDescription: "Un proyecto de ejemplo para demostrar la funcionalidad.",
  caseStudyTitle: "Caso de Estudio - Proyecto de Ejemplo",
  images: [
    { alt: "Imagen de ejemplo", placeholder: "Imagen de ejemplo" }
  ],
  servicesTitle: "Los servicios que ofrecimos:",
  services: [
    { name: "Diseño UX/UI" },
    { name: "Desarrollo Frontend" }
  ],
  learningTitle: "Nuestros Aprendizajes",
  publishDate: new Date(),
  featured: false,
  status: "published"
};

// Helper function to render rich text content (Lexical format)
function renderRichText(content: any): string {
  if (!content) return '';
  // This assumes Lexical format - adjust based on your Payload editor
  // For now, we'll do a basic conversion. You may need @payloadcms/richtext-lexical for proper rendering
  try {
    if (typeof content === 'string') return content;
    if (content.root && content.root.children) {
      return content.root.children
        .map((node: any) => {
          if (node.children) {
            return node.children.map((child: any) => child.text || '').join('');
          }
          return node.text || '';
        })
        .join('\n\n');
    }
    return JSON.stringify(content);
  } catch (error) {
    console.error('Error rendering rich text:', error);
    return '';
  }
}

// Transform Payload project to template format
const projectData = project ? {
  projectTitle: project.title,
  projectCategories: [project.category.name],
  projectDescription: project.hero.description,
  bannerImage: getImageUrl(project.hero.bannerImage?.url),
  caseStudyTitle: project.caseStudy.title,
  caseStudyContent: renderRichText(project.caseStudy.content),
  images: project.gallery.map(item => ({
    src: getImageUrl(item.image?.url),
    alt: item.alt,
    placeholder: item.caption || item.alt
  })),
  servicesTitle: currentLang === 'en' ? "What we did:" : "Los servicios que ofrecimos:",
  services: project.hero.services.map(service => ({ name: service.name })),
  learningTitle: project.learnings.title,
  learningContent: renderRichText(project.learnings.content),
} : exampleData;

// SEO
const seoTitle = `${projectData.projectTitle} - Aurin`;
const seoDescription = projectData.projectDescription || "Proyecto desarrollado por Aurin";
---

<Layout
  title={seoTitle}
  description={seoDescription}
>
  <Template
    projectData={projectData}
  />
</Layout>
