---
// Toast Component for notifications
---

<div id="toast-container" class="toast-container"></div>

<style>
  .toast-container {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    z-index: 9998; /* Below MegaMenu (9999), Above Chatbot (9997) */
    display: flex;
    flex-direction: column;
    gap: 1rem;
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .toast-container {
      right: 1rem;
      bottom: 1rem;
      left: 1rem;
    }
  }

  :global(.toast) {
    pointer-events: auto;
    min-width: 300px;
    max-width: 400px;
    padding: 1rem 1.25rem;
    border-radius: 12px;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    opacity: 0;
    transform: translateY(100%);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  :global(.toast.toast-visible) {
    opacity: 1;
    transform: translateY(0);
  }

  :global(.toast.toast-exiting) {
    opacity: 0;
    transform: translateX(150%);
  }

  :global(.toast-success) {
    background-color: #d0df00;
    color: #0A0A0A;
  }

  :global(.toast-error) {
    background-color: #ff9494;
    color: #0A0A0A;
  }

  :global(.toast-icon) {
    flex-shrink: 0;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  :global(.toast-content) {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  :global(.toast-title) {
    font-weight: 600;
    font-size: 0.975rem;
    line-height: 1.25;
    margin: 0;
  }

  :global(.toast-description) {
    font-size: 0.925rem;
    line-height: 1.25;
    opacity: 0.9;
    margin: 0;
  }

  :global(.toast-close) {
    flex-shrink: 0;
    width: 24px;
    height: 24px;
    border: none;
    background: transparent;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 6px;
    transition: background-color 0.2s ease;
    padding: 0;
    color: inherit;
  }

  :global(.toast-close:hover) {
    background-color: rgba(0, 0, 0, 0.1);
  }

  @media (max-width: 768px) {
    :global(.toast) {
      min-width: unset;
      width: 100%;
    }
  }
</style>

<script>
  interface ToastOptions {
    title: string;
    description?: string;
    type?: 'success' | 'error';
    duration?: number;
  }

  class ToastManager {
    private container: HTMLElement;
    private toasts: Set<HTMLElement> = new Set();

    constructor() {
      this.container = document.getElementById('toast-container')!;
    }

    show(options: ToastOptions) {
      const {
        title,
        description = '',
        type = 'success',
        duration = 5000,
      } = options;

      const toast = this.createToast(title, description, type);
      this.container.appendChild(toast);
      this.toasts.add(toast);

      // Trigger animation
      requestAnimationFrame(() => {
        toast.classList.add('toast-visible');
      });

      // Auto dismiss
      if (duration > 0) {
        setTimeout(() => {
          this.dismiss(toast);
        }, duration);
      }
    }

    private createToast(title: string, description: string, type: 'success' | 'error'): HTMLElement {
      const toast = document.createElement('div');
      toast.className = `toast toast-${type}`;

      const icon = this.getIcon(type);

      toast.innerHTML = `
        <div class="toast-icon">${icon}</div>
        <div class="toast-content">
          <p class="toast-title">${title}</p>
          ${description ? `<p class="toast-description">${description}</p>` : ''}
        </div>
        <button class="toast-close" aria-label="Cerrar">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 6 6 18" />
            <path d="m6 6 12 12" />
          </svg>
        </button>
      `;

      const closeButton = toast.querySelector('.toast-close');
      closeButton?.addEventListener('click', () => {
        this.dismiss(toast);
      });

      return toast;
    }

    private getIcon(type: 'success' | 'error'): string {
      if (type === 'success') {
        return `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
            <polyline points="22 4 12 14.01 9 11.01"/>
          </svg>
        `;
      } else {
        return `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"/>
            <line x1="12" y1="8" x2="12" y2="12"/>
            <line x1="12" y1="16" x2="12.01" y2="16"/>
          </svg>
        `;
      }
    }

    private dismiss(toast: HTMLElement) {
      toast.classList.add('toast-exiting');

      setTimeout(() => {
        toast.remove();
        this.toasts.delete(toast);
      }, 400);
    }
  }

  // Global instance
  const toastManager = new ToastManager();

  // Expose globally
  (window as any).showToast = (options: ToastOptions) => {
    toastManager.show(options);
  };
</script>
