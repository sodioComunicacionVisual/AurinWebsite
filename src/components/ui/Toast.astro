---
// Toast Component for notifications
import styles from './Toast.module.css';
---

<div id="toast-container" class={styles['toast-container']}></div>



<script>
  interface ToastOptions {
    title: string;
    description?: string;
    type?: 'success' | 'error';
    duration?: number;
  }

  class ToastManager {
    private container: HTMLElement;
    private toasts: Set<HTMLElement> = new Set();

    constructor() {
      this.container = document.getElementById('toast-container')!;
    }

    show(options: ToastOptions) {
      const {
        title,
        description = '',
        type = 'success',
        duration = 5000,
      } = options;

      const toast = this.createToast(title, description, type);
      this.container.appendChild(toast);
      this.toasts.add(toast);

      // Trigger animation
      requestAnimationFrame(() => {
        toast.classList.add('toast-visible');
      });

      // Auto dismiss
      if (duration > 0) {
        setTimeout(() => {
          this.dismiss(toast);
        }, duration);
      }
    }

    private createToast(title: string, description: string, type: 'success' | 'error'): HTMLElement {
      const toast = document.createElement('div');
      toast.className = `toast toast-${type}`;

      const icon = this.getIcon(type);

      toast.innerHTML = `
        <div class="toast-icon">${icon}</div>
        <div class="toast-content">
          <p class="toast-title">${title}</p>
          ${description ? `<p class="toast-description">${description}</p>` : ''}
        </div>
        <button class="toast-close" aria-label="Cerrar">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M18 6 6 18" />
            <path d="m6 6 12 12" />
          </svg>
        </button>
      `;

      const closeButton = toast.querySelector('.toast-close');
      closeButton?.addEventListener('click', () => {
        this.dismiss(toast);
      });

      return toast;
    }

    private getIcon(type: 'success' | 'error'): string {
      if (type === 'success') {
        return `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
            <polyline points="22 4 12 14.01 9 11.01"/>
          </svg>
        `;
      } else {
        return `
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"/>
            <line x1="12" y1="8" x2="12" y2="12"/>
            <line x1="12" y1="16" x2="12.01" y2="16"/>
          </svg>
        `;
      }
    }

    private dismiss(toast: HTMLElement) {
      toast.classList.add('toast-exiting');

      setTimeout(() => {
        toast.remove();
        this.toasts.delete(toast);
      }, 400);
    }
  }

  // Global instance
  const toastManager = new ToastManager();

  // Expose globally
  (window as any).showToast = (options: ToastOptions) => {
    toastManager.show(options);
  };
</script>
