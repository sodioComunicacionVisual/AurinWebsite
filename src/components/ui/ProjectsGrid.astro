---
import ProjectCard from './ProjectCard.astro';
import { getLangFromUrl } from '../../i18n/utils.js';
import { PayloadAPI, getProjectUrl, getImageUrl, type PayloadProject } from '../../lib/payload';
import styles from './ProjectsGrid.module.css';

interface Props {
  maxProjects?: number;
  showHeader?: boolean;
  headerTitle?: string;
  class?: string;
}

const { 
  maxProjects,
  showHeader = false,
  headerTitle = '',
  class: className = ''
} = Astro.props;

// Detect current language
const currentLang = getLangFromUrl(Astro.url);

// Fetch all projects from Payload CMS
let projects: PayloadProject[] = [];
try {
  const allProjects = await PayloadAPI.getProjects(currentLang);
  // Apply maxProjects limit if specified
  projects = maxProjects ? allProjects.slice(0, maxProjects) : allProjects;
} catch (error) {
  console.error('Error fetching projects:', error);
  // Fallback to empty array if CMS is not available
  projects = [];
}
---

<div class={`${styles.projectsGridContainer} ${className}`}>
  {showHeader && headerTitle && (
    <div class={styles.headerSection}>
      <h2 class={styles.gridTitle}>{headerTitle}</h2>
    </div>
  )}
  
  <div class={styles.projectsGrid}>
    {projects.length > 0 ? (
      projects.map((project) => (
        <ProjectCard
          title={project.title}
          tags={[
            project.category.name,
            ...(project.tags?.slice(0, 2).map((tag: any) => tag.name) || [])
          ]}
          image={getImageUrl(project.hero.bannerImage?.url) || 'https://placehold.co/800x600?text=No+Image'}
          href={getProjectUrl(project, currentLang)}
        />
      ))
    ) : (
      <div class={styles.emptyState}>
        <p class={styles.emptyMessage}>
          {currentLang === 'es' ? 'No hay proyectos disponibles en este momento.' : 'No projects available at the moment.'}
        </p>
      </div>
    )}
  </div>
</div>
