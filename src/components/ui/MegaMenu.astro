---
import styles from './MegaMenu.module.css';
import { ArrowRight, X, Instagram, Linkedin, Facebook } from 'lucide-astro';
import { getLangFromUrl } from '../../i18n/utils';
import { translations } from '../../i18n/translations';

interface Props {
  isOpen?: boolean;
}

const { isOpen = false } = Astro.props;

const currentLang = getLangFromUrl(Astro.url);
const t = translations[currentLang];

const menuItems = [
  { label: t.megaMenu.menuItems.home, href: currentLang === 'es' ? '/' : '/en' },
  { label: t.megaMenu.menuItems.services, href: currentLang === 'es' ? '/servicios' : '/en/services' },
  { label: t.megaMenu.menuItems.projects, href: currentLang === 'es' ? '/proyectos' : '/en/projects' },
  { label: t.megaMenu.menuItems.about, href: currentLang === 'es' ? '/nosotros' : '/en/about' },
  { label: t.megaMenu.menuItems.contact, href: currentLang === 'es' ? '/contacto' : '/en/contact' },
];
---

<div class={styles['mega-menu']} data-mega-menu>
  <div class={styles['mega-menu-overlay']} data-menu-overlay></div>
  
  <div class={styles['mega-menu-content']} data-menu-content>
    <button class={styles['close-button']} data-close-menu aria-label={t.megaMenu.closeMenu}>
      <X size={32} />
    </button>

    <nav class={styles['menu-nav']}>
      {menuItems.map((item, index) => (
        <div class={styles['menu-item']} data-menu-item data-index={index}>
          <div class={styles['menu-item-arrow']}>
            <ArrowRight size={40} strokeWidth={3} />
          </div>
          <a href={item.href} class={`${styles['menu-link']} menu-link`}>
            {item.label}
          </a>
        </div>
      ))}
    </nav>

    <div class={styles['social-links']}>
      <a href="https://www.instagram.com/aurinmx?igsh=MWxyOW5obGtpaHUwMA==" target="_blank" rel="noopener noreferrer" class={styles['social-icon']} aria-label="Instagram">
        <Instagram size={24} />
      </a>
      <a href="https://www.linkedin.com/company/aurinmx/" target="_blank" rel="noopener noreferrer" class={styles['social-icon']} aria-label="LinkedIn">
        <Linkedin size={24} />
      </a>
      <a href="https://www.facebook.com/profile.php?id=61569531232140" target="_blank" rel="noopener noreferrer" class={styles['social-icon']} aria-label="Facebook">
        <Facebook size={24} />
      </a>
    </div>
  </div>
</div>



<script>
  // Mega Menu functionality
  function initMegaMenu() {
    console.log('[MegaMenu] Initializing MegaMenu');
    const megaMenu = document.querySelector('[data-mega-menu]') as HTMLElement;
    const closeButton = document.querySelector('[data-close-menu]') as HTMLButtonElement;
    const overlay = document.querySelector('[data-menu-overlay]') as HTMLElement;
    const menuLinks = document.querySelectorAll('.menu-link');

    console.log('[MegaMenu] Elements found:', {
      megaMenu: !!megaMenu,
      closeButton: !!closeButton,
      overlay: !!overlay,
      menuLinksCount: menuLinks.length
    });

    if (!megaMenu) {
      console.error('[MegaMenu] MegaMenu element not found!');
      return;
    }

    // Listen for custom event to open menu
    document.addEventListener('toggle-mega-menu', () => {
      console.log('[MegaMenu] toggle-mega-menu event received');
      const isOpen = megaMenu.getAttribute('data-open') === 'true';
      console.log('[MegaMenu] Current state - isOpen:', isOpen);

      if (isOpen) {
        console.log('[MegaMenu] Closing menu');
        megaMenu.setAttribute('data-open', 'false');
        document.body.style.overflow = '';
      } else {
        console.log('[MegaMenu] Opening menu');
        megaMenu.setAttribute('data-open', 'true');
        document.body.style.overflow = 'hidden';
      }
    });

    // Close button
    closeButton?.addEventListener('click', () => {
      console.log('[MegaMenu] Close button clicked');
      megaMenu.setAttribute('data-open', 'false');
      document.body.style.overflow = '';
    });

    // Close on overlay click
    overlay?.addEventListener('click', () => {
      console.log('[MegaMenu] Overlay clicked');
      megaMenu.setAttribute('data-open', 'false');
      document.body.style.overflow = '';
    });

    // Close on link click
    menuLinks.forEach(link => {
      link.addEventListener('click', () => {
        console.log('[MegaMenu] Menu link clicked');
        megaMenu.setAttribute('data-open', 'false');
        document.body.style.overflow = '';
      });
    });

    // Close on ESC key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && megaMenu.getAttribute('data-open') === 'true') {
        console.log('[MegaMenu] ESC key pressed, closing menu');
        megaMenu.setAttribute('data-open', 'false');
        document.body.style.overflow = '';
      }
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initMegaMenu);
  } else {
    initMegaMenu();
  }

  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', initMegaMenu);
</script>
