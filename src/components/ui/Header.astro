---
import styles from './Header.module.css';
import { Menu, Globe } from 'lucide-astro';
import { getLangFromUrl, getLocalizedUrl, getAlternateLanguage } from '../../i18n/utils.js';
import { translations } from '../../i18n/translations.js';

interface Props {
  class?: string;
}

const { class: className } = Astro.props;

// Detect current language
const currentLang = getLangFromUrl(Astro.url);
const alternateLang = getAlternateLanguage(currentLang);
const t = translations[currentLang];

// Generate alternate URL for language switching
const currentPath = Astro.url.pathname;
let alternateUrl = getLocalizedUrl(currentPath, alternateLang);

// Handle specific page mappings
if (currentPath === '/nosotros' && alternateLang === 'en') {
  alternateUrl = '/en/about';
} else if (currentPath === '/en/about' && alternateLang === 'es') {
  alternateUrl = '/nosotros';
} else if (currentPath === '/servicios' && alternateLang === 'en') {
  alternateUrl = '/en/services';
} else if (currentPath === '/en/services' && alternateLang === 'es') {
  alternateUrl = '/servicios';
} else if (currentPath === '/contacto' && alternateLang === 'en') {
  alternateUrl = '/en/contact';
} else if (currentPath === '/en/contact' && alternateLang === 'es') {
  alternateUrl = '/contacto';
} else if (currentPath === '/proyectos' && alternateLang === 'en') {
  alternateUrl = '/en/projects';
} else if (currentPath === '/en/projects' && alternateLang === 'es') {
  alternateUrl = '/proyectos';
}
---

<header class={`${styles.header} header ${className || ''}`}>
  <div class={styles['header-container']}>
    <!-- Logo Section -->
    <a href={currentLang === 'es' ? '/' : '/en'} class={styles['logo-link']} aria-label={currentLang === 'es' ? 'Ir a inicio' : 'Go to home'}>
      <img
        class={styles['header-logo']}
        src="https://pub-d17bbbdbf8e348c5a57c8168ad69c92f.r2.dev/AurinTinyWhiteLogo.svg"
        alt="Aurin Logo"
      />
    </a>

    <!-- Actions Section -->
    <div class={styles['actions-section']}>
      <!-- Language Toggle Button -->
      <a 
        href={alternateUrl} 
        class={`${styles['lang-button']} lang-button`}
        aria-label={currentLang === 'es' ? t.header.switchToEnglish : t.header.switchToSpanish}
      >
        <Globe size={20} />
        <span>{alternateLang.toUpperCase()}</span>
      </a>

      <!-- Menu Button -->
      <button class={styles['menu-button']} data-menu-trigger aria-label={currentLang === 'es' ? 'Abrir menÃº' : 'Open menu'}>
        <span class={styles['menu-text']}>{t.header.menu}</span>
        <div class={styles['menu-icon']}>
          <div class={styles['menu-icon-bg']}></div>
          <Menu size={24} strokeWidth={2.5} class={styles['menu-icon-svg']} />
        </div>
      </button>
    </div>
  </div>
</header>



<script>
  function initHeader() {
    // Set active navigation link
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link');
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href && (href === currentPath || (currentPath === '/' && href === '/'))) {
        link.classList.add('active');
      } else if (href && href !== '/' && currentPath.startsWith(href)) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });

    // Menu button functionality
    const menuButtons = document.querySelectorAll('[data-menu-trigger]');

    menuButtons.forEach(button => {
      button.addEventListener('click', () => {
        document.dispatchEvent(new CustomEvent('toggle-mega-menu'));
      });
    });

    // Language button functionality
    const langButtons = document.querySelectorAll('.lang-button');
    
    langButtons.forEach(button => {
      button.addEventListener('click', () => {
        // window.location.href = '/en';
      });
    });

    // Header scroll behavior
    const header = document.querySelector('.header');
    if (!header) return;

    let lastScrollY = window.scrollY;
    let ticking = false;

    const updateHeader = () => {
      const currentScrollY = window.scrollY;
      
      // Apply top0 class when at top of page (transparent background)
      if (currentScrollY <= 0) {
        header.classList.add('top0');
        header.classList.remove('header-hidden');
        header.classList.add('header-visible');
      }
      // Remove top0 class when scrolled (solid background)
      else {
        header.classList.remove('top0');
        
        // Hide header when scrolling down
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          header.classList.add('header-hidden');
          header.classList.remove('header-visible');
        }
        // Show header when scrolling up
        else if (currentScrollY < lastScrollY) {
          header.classList.remove('header-hidden');
          header.classList.add('header-visible');
        }
      }

      lastScrollY = currentScrollY;
      ticking = false;
    };

    const onScroll = () => {
      if (!ticking) {
        window.requestAnimationFrame(updateHeader);
        ticking = true;
      }
    };

    window.addEventListener('scroll', onScroll, { passive: true });
    
    // Set initial header state on load
    updateHeader();
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeader);
  } else {
    initHeader();
  }

  // Re-initialize on navigation
  document.addEventListener('astro:page-load', initHeader);
</script>
