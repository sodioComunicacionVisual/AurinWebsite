---
// Componente de lámpara con efecto de luz constante mejorado
interface Props {
  lightColor?: string;
  intensity?: 'low' | 'medium' | 'high';
}

const { lightColor = '#fcffbb', intensity = 'medium' } = Astro.props;

// Función para aclarar el color (crear tonos más claros)
function lightenColor(color: string, percent: number): string {
  const hex = color.replace('#', '');
  const r = parseInt(hex.substr(0, 2), 16);
  const g = parseInt(hex.substr(2, 2), 16);
  const b = parseInt(hex.substr(4, 2), 16);

  const newR = Math.min(255, Math.floor(r + ((255 - r) * percent) / 100));
  const newG = Math.min(255, Math.floor(g + ((255 - g) * percent) / 100));
  const newB = Math.min(255, Math.floor(b + ((255 - b) * percent) / 100));

  return `rgb(${newR}, ${newG}, ${newB})`;
}

const light20 = lightenColor(lightColor, 20);
const light10 = lightenColor(lightColor, 10);
const light5 = lightenColor(lightColor, 5);
---

<div class="lamp-container">
  <!-- Lámpara (base brillante) -->
  <div class="lamp-base">
    <div class="lamp-bulb"></div>
  </div>

  <!-- Haz de luz usando box-shadow apilados -->
  <div class="light-beam"></div>
</div>

<style define:vars={{
  lightColor,
  light20,
  light10,
  light5
}}>
  .lamp-container {
    position: relative;
    display: inline-block;
    margin-top: 80px;
    width: 100%;
    height: 100vh;
    overflow: visible;
  }

  .lamp-base {
    position: absolute;
    top: 50%;
    left: -50px;
    transform: translateY(-50%);
    z-index: 10;
  }

  .lamp-bulb {
    width: 30px;
    height: 30px;
    background-color: rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    box-shadow:
      /* Brillo concentrado en la fuente */
      0 0 15px 8px rgba(255, 255, 255, 0.4),
      0 0 25px 12px rgba(255, 255, 255, 0.3),
      0 0 40px 15px rgba(255, 255, 255, 0.2),
      /* Proyección hacia la derecha (dirección del haz) */
      20px 0 50px 20px rgba(255, 255, 255, 0.15),
      40px 0 80px 30px rgba(255, 255, 255, 0.1);
  }

  .light-beam {
    position: absolute;
    top: 50%;
    left: -50px;
    transform: translateY(-50%);
    width: 900px;
    height: 80px;
    background: linear-gradient(
      to right,
      rgba(255, 255, 255, 0.3) 0%,
      rgba(255, 255, 255, 0.2) 8%,
      rgba(255, 255, 255, 0.12) 20%,
      rgba(255, 255, 255, 0.06) 40%,
      rgba(255, 255, 255, 0.03) 65%,
      transparent 100%
    );
    filter: blur(25px);
    z-index: 1;
    opacity: 0.85;
  }

  .light-beam::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: 1100px;
    height: 150px;
    background: linear-gradient(
      to right,
      rgba(255, 255, 255, 0.15) 0%,
      rgba(255, 255, 255, 0.1) 15%,
      rgba(255, 255, 255, 0.05) 35%,
      rgba(255, 255, 255, 0.02) 60%,
      transparent 90%
    );
    filter: blur(60px);
    opacity: 0.5;
  }

  .light-beam::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: 700px;
    height: 50px;
    background: linear-gradient(
      to right,
      rgba(255, 255, 255, 0.4) 0%,
      rgba(255, 255, 255, 0.25) 5%,
      rgba(255, 255, 255, 0.15) 15%,
      rgba(255, 255, 255, 0.08) 35%,
      rgba(255, 255, 255, 0.03) 60%,
      transparent 95%
    );
    filter: blur(10px);
    opacity: 1;
  }

  .particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 5;
  }

  .particle {
    position: absolute;
    width: 3px;
    height: 3px;
    background: rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    box-shadow: 0 0 2px rgba(255, 255, 255, 0.8);
    animation: floatParticle ease-in-out infinite;
  }

  @keyframes floatParticle {
    0% {
      opacity: 0;
      transform: translate(0, 0);
    }
    10% {
      opacity: 1;
    }
    90% {
      opacity: 0.5;
    }
    100% {
      opacity: 0;
      transform: translate(var(--tx), var(--ty));
    }
  }

  .particle:nth-child(odd) {
    --tx: 40px;
    --ty: -20px;
  }

  .particle:nth-child(even) {
    --tx: -30px;
    --ty: 15px;
  }

  .particle:nth-child(3n) {
    --tx: 50px;
    --ty: 10px;
  }

  .particle:nth-child(4n) {
    --tx: -40px;
    --ty: -15px;
  }

  .particle:nth-child(5n) {
    --tx: 35px;
    --ty: -25px;
  }

  .particle:nth-child(6n) {
    --tx: -25px;
    --ty: 20px;
  }
</style>
