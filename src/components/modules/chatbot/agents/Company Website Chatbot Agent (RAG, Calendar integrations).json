{
  "name": "Company Website Chatbot Agent (RAG, Calendar integrations)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chatbot",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -752,
        -320
      ],
      "id": "e033ad73-cd7f-4cd5-b6fe-69499f14e330",
      "name": "Webhook",
      "webhookId": "f18aca18-5ade-4c75-ab64-1496a980b445",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "jsCode": "// CÓDIGO MEJORADO - Maneja contexto de Calendar y FileUrl\nconst message = $json.body.message;\nconst sessionId = $json.body.sessionId;\nconst metadata = $json.body.metadata || {};\nconst newFileUrl = $json.body.fileUrl || null;\n\nconsole.log('=== STORE CONTEXT ===');\nconsole.log('Message:', message);\nconsole.log('SessionId:', sessionId);\nconsole.log('FileUrl:', newFileUrl);\nconsole.log('Metadata:', metadata);\n\n// Agregar fileUrl al mensaje si existe\nlet enhancedMessage = message;\nif (newFileUrl) {\n  enhancedMessage = `${message}\\n\\n[SYSTEM: User attached file: ${newFileUrl}]`;\n  console.log('✅ FileUrl inyectado en el mensaje');\n}\n\n// Extraer datos de calendario si existen en metadata\nconst customerEmail = metadata.customerEmail || '';\nconst pendingBooking = metadata.pendingBooking || null;\nconst customerData = metadata.customerData || null;\n\nreturn [{\n  json: {\n    chatInput: enhancedMessage,\n    sessionId: sessionId,\n    action: \"sendMessage\",\n    metadata: metadata,\n    fileUrl: newFileUrl,\n    query: message,\n    // Datos de calendario para contexto\n    customerEmail: customerEmail,\n    pendingBooking: pendingBooking,\n    customerData: customerData\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        -320
      ],
      "id": "67eb2a34-720e-41d9-8067-80296dc0cd6a",
      "name": "Store Context and FileUrl"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are Aurin's chatbot assistant. You route requests to tools - never answer directly.\\n\\nTOOLS:\\n• RAGagent - FAQs about Aurin\\n• calendarAgent - Schedule meetings\\n• ticketAgent - Create support tickets\\n\\nCALENDAR WORKFLOW:\\n1. Check availability: call calendarAgent with user's query\\n2. User picks time → collect: nombre completo, email, empresa (optional), descripción del proyecto\\n3. When you have all data, call calendarAgent again with JSON:\\n{\\n  \\\"name\\\": \\\"Full Name\\\",\\n  \\\"email\\\": \\\"email@example.com\\\",\\n  \\\"company\\\": \\\"Company or empty\\\",\\n  \\\"project\\\": \\\"Project description\\\"\\n}\\n4. After booking, remind user to CONFIRM within 24h\\n5. For cancellation/confirmation, call calendarAgent with action\\n\\nTICKET CREATION:\\nCollect: nombre, email, empresa, servicio, asunto, descripcion, archivoAdjunto\\n\\nIMPORTANT - FILE ATTACHMENTS:\\nWhen you see [SYSTEM: User attached file: URL] in the conversation, extract the URL.\\n\\nEXAMPLE MESSAGE:\\n\\\"Hello\\n\\n[SYSTEM: User attached file: https://blob.vercel-storage.com/file.png]\\\"\\n\\nEXTRACT: https://blob.vercel-storage.com/file.png\\n\\nJSON FORMAT for ticketAgent (REQUIRED):\\n{\\n  \\\"nombre\\\": \\\"Name\\\",\\n  \\\"email\\\": \\\"email@example.com\\\",\\n  \\\"empresa\\\": \\\"\\\",\\n  \\\"servicio\\\": \\\"Service\\\",\\n  \\\"asunto\\\": \\\"Subject\\\",\\n  \\\"descripcion\\\": \\\"Description\\\",\\n  \\\"archivoAdjunto\\\": \\\"https://extracted-url-here or empty string\\\"\\n}\\n\\nRULES:\\n1. If [SYSTEM: User attached file: URL] appears → extract URL\\n2. Always use empty string \\\"\\\" if no data (NEVER use null)\\n3. For calendar: guide user through data collection step by step\\n4. Speak Spanish naturally\\n5. After creating booking, emphasize 24h confirmation requirement",
          "maxIterations": 10
        }
      },
      "id": "052aea84-8608-4ae6-b1a0-32b581a065c5",
      "name": "Ultimate Website Chatbot Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -16,
        -320
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "id": "842015f2-b2ae-4fd4-a72a-74d8d97bc3ca",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -368,
        64
      ],
      "typeVersion": 1.2,
      "credentials": {
        "openAiApi": {
          "id": "ACV0x1hM8fnlwMsD",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionId }}",
        "contextWindowLength": 10
      },
      "id": "5a2fa335-5f4f-4ed6-ac5d-742f95ed29df",
      "name": "Simple Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "position": [
        -128,
        160
      ],
      "typeVersion": 1.3
    },
    {
      "parameters": {
        "name": "ticketAgent",
        "description": "Call this tool to create a support ticket. Collect: name, email, company, specific service needed, subject/reason, description, and optional file attachment. Format all data clearly for ticket creation.",
        "workflowId": {
          "__rl": true,
          "value": "G1oYf8PDKQ8h26wa",
          "mode": "list",
          "cachedResultUrl": "/workflow/G1oYf8PDKQ8h26wa",
          "cachedResultName": "Ticket Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}"
          }
        }
      },
      "id": "20118042-220b-4229-8e78-3965c7f750e3",
      "name": "ticketAgent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        112,
        256
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "name": "RAGagent",
        "description": "Call this tool to answer FAQs about Aurin services, portfolio, and expertise. Pass the user's question as input.",
        "workflowId": {
          "__rl": true,
          "value": "ivDdTsqIFM7DI29c",
          "mode": "list",
          "cachedResultUrl": "/workflow/ivDdTsqIFM7DI29c",
          "cachedResultName": "RAG Agent"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "question": "={{ $json.query }}"
          }
        }
      },
      "id": "ef815e49-3df5-4612-9c60-d94d35851130",
      "name": "RAGagent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        416,
        448
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "name": "calendarAgent",
        "description": "Call this tool for any calendar-related action: check availability, book appointments, cancel meetings, or confirm bookings. When booking, collect full name, email, company (optional), and project description. Pass all data including query, customerEmail, pendingBooking, and customerData.",
        "workflowId": {
          "__rl": true,
          "value": "pgF8FnVC5RyNZd90",
          "mode": "list",
          "cachedResultUrl": "/workflow/pgF8FnVC5RyNZd90",
          "cachedResultName": "Calendar Agent Pro v3 (Corrected)"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "query": "={{ $json.query }}",
            "customerEmail": "={{ $json.customerEmail || '' }}",
            "pendingBooking": "={{ $json.pendingBooking || null }}",
            "customerData": "={{ $json.customerData || null }}"
          }
        }
      },
      "id": "5eba3e16-492f-4420-8c51-308860737f1e",
      "name": "calendarAgent",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        560,
        96
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-output",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "output-text",
              "name": "output",
              "value": "={{ $json.output }}",
              "type": "string"
            },
            {
              "id": "session-id",
              "name": "sessionId",
              "value": "={{ $('Store Context and FileUrl').first().json.sessionId }}",
              "type": "string"
            },
            {
              "id": "metadata",
              "name": "metadata",
              "value": "={{ { customerEmail: $json.customerEmail || '', pendingBooking: $json.pendingBooking || null, customerData: $json.customerData || null, requiresConfirmation: $json.requiresConfirmation || false } }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        256,
        -320
      ],
      "id": "217a8739-6add-4838-a2cb-1b3a3ddb6c86",
      "name": "Format Success Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        576,
        -320
      ],
      "id": "d3a43cbf-2d4c-461b-bc02-1d91acb5aab7",
      "name": "Respond Success"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Store Context and FileUrl",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Context and FileUrl": {
      "main": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ultimate Website Chatbot Agent": {
      "main": [
        [
          {
            "node": "Format Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Success Response": {
      "main": [
        [
          {
            "node": "Respond Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "ticketAgent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "RAGagent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "calendarAgent": {
      "ai_tool": [
        [
          {
            "node": "Ultimate Website Chatbot Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "41849921-8237-4fb0-aaf1-109a4731e02c",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "db2c5968277b4288cf1a8381d1c27435aa3685422063464e1fce28aecf0339d7"
  },
  "id": "WFX6r8v58WSuBw1P",
  "tags": []
}