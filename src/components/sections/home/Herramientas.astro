---
import ScrollReveal from '../../ui/ScrollReveal.astro';
import { getLangFromUrl } from '../../../i18n/utils.js';
import { translations } from '../../../i18n/translations.js';
import styles from './Herramientas.module.css';

interface HerramientaItem {
  id: string;
  letter: string;
  title: string;
  href: string;
}

interface Props {
  title?: string;
  titlePart1?: string;
  titlePart2?: string;
  description?: string;
  items?: HerramientaItem[];
}

// Detect current language
const currentLang = getLangFromUrl(Astro.url);
const t = translations[currentLang];

const {
  title = t.herramientas.titlePart1 + " " + t.herramientas.titlePart2,
  titlePart1 = t.herramientas.titlePart1,
  titlePart2 = t.herramientas.titlePart2,
  description = t.herramientas.description,
  items = [
    {
      id: "desarrollo-web",
      letter: "W",
      title: t.herramientas.webDev,
      href: "#",
    },
    {
      id: "usabilidad",
      letter: "U",
      title: t.herramientas.usability,
      href: "#",
    },
    {
      id: "branding",
      letter: "I",
      title: t.herramientas.branding,
      href: "#",
    },
    {
      id: "marketing",
      letter: "M",
      title: t.herramientas.marketing,
      href: "#",
    },
    {
      id: "diseno-ux-ui",
      letter: "X",
      title: t.herramientas.uxui,
      href: "#",
    },
  ],
} = Astro.props;

const uniqueId = `carousel-${Math.random().toString(36).substr(2, 9)}`;
---

<section class={styles.herramientasSection}>
  <div class={styles.container}>
    <div class={styles.header}>
      <div class={styles.headerContent}>
        <div class={styles.titleWrapper}>
          <ScrollReveal 
            text={`${titlePart1}\n${titlePart2}`}
            tag="h2"
            textClass={styles.title}
            baseOpacity={0.15}
            baseRotation={5}
            blurStrength={6}
            enableBlur={true}
          />
        </div>
        <p class={`${styles.description} body-1`}>{description}</p>
      </div>
    </div>
  </div>

  <section class={styles.splide} id={uniqueId} aria-label="Herramientas carousel">
    <div class={styles.splideTrack}>
      <ul class={styles.splideList} role="list">
        {items.map((item, index) => (
          <li class={styles.splideSlide} role="listitem" aria-label={`${index + 1} de ${items.length}: ${item.title}`}>
            <a href={item.href} class={styles.cardLink} aria-label={`Ver más sobre ${item.title}`}>
              <div class={styles.card}>
                <div class={styles.cardLetter} aria-hidden="true">
                  {item.letter}
                </div>
                <div class={styles.cardContent}>
                  <div class={styles.cardTitle}>
                    {item.title}
                  </div>
                </div>
              </div>
            </a>
          </li>
        ))}
      </ul>
    </div>
  </section>
</section>



<script>
  import Splide from '@splidejs/splide';
  import '@splidejs/splide/css/core';
  import { animate, inView } from "motion";

  document.addEventListener('DOMContentLoaded', () => {
    const splideElement = document.querySelector('.splide') as HTMLElement;
    
    if (splideElement) {
      const splide = new Splide(splideElement, {
        fixedWidth: '250px',
        perMove: 1,
        gap: '1.75rem',
        padding: '2rem',
        pagination: false,
        arrows: false,
        drag: true,
        accessibility: {
          slideRole: '',
          slideLabel: '',
          slideLabelFormat: '',
        },
        breakpoints: {
          1024: {
            fixedWidth: '250px',
            gap: '1.5rem',
            padding: '1.5rem',
          },
          768: {
            fixedWidth: '220px',
            gap: '1rem',
            padding: '1rem',
          },
          480: {
            fixedWidth: '200px',
            gap: '0.5rem',
            padding: '0.5rem',
          },
        },
      });

      splide.mount();


      // Animaciones con IntersectionObserver para las cards
      const cards = document.querySelectorAll('.card');

      const observerOptions = {
        threshold: 0.2,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);

      cards.forEach((card, index) => {
        // Añadir delay escalonado
        (card as HTMLElement).style.transitionDelay = `${index * 0.15}s`;
        observer.observe(card);
      });
    }
  });
</script>
