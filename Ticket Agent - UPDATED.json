{
  "createdAt": "2025-10-14T19:44:13.329Z",
  "updatedAt": "2025-10-15T19:57:06.000Z",
  "id": "xofJhOkiHd6ietuS",
  "name": "Ticket Agent",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {},
      "id": "53efe948-02d0-437a-ba84-77b6401c1986",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        576,
        -32
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extraer datos del ticket y fileUrl con mÃºltiples fuentes\nconst ticketData = $input.item.json.ticketData || $input.item.json.query || '';\n\n// Buscar fileUrl en mÃºltiples ubicaciones posibles\nconst fileUrl = $input.item.json.fileUrl \n  || $input.item.json.body?.fileUrl \n  || $input.item.json.metadata?.fileUrl \n  || null;\n\nconsole.log('Ticket Agent - FileUrl recibido:', fileUrl);\nconsole.log('Ticket Agent - TicketData:', ticketData);\n\n// Parsear informaciÃ³n usando regex mejorado para los nuevos campos\nconst nameMatch = ticketData.match(/(?:nombre?|name)[:\\s]+([^,\\n]+)/i);\nconst emailMatch = ticketData.match(/(?:email|correo)[:\\s]+([^\\s,\\n]+)/i);\nconst companyMatch = ticketData.match(/(?:empresa|company)[:\\s]+([^,\\n]+)/i);\nconst serviceMatch = ticketData.match(/(?:servicio|service)[:\\s]+([^,\\n]+)/i);\nconst subjectMatch = ticketData.match(/(?:asunto|subject|razÃ³n)[:\\s]+([^,\\n]+)/i);\nconst descMatch = ticketData.match(/(?:descripci[oÃ³]n?|description)[:\\s]+(.+)/is);\n\n// Extraer datos con fallbacks\nconst name = nameMatch ? nameMatch[1].trim() : 'No proporcionado';\nconst email = emailMatch ? emailMatch[1].trim() : 'No proporcionado';\nconst company = companyMatch ? companyMatch[1].trim() : 'No especificado';\nconst service = serviceMatch ? serviceMatch[1].trim() : 'No especificado';\nconst subject = subjectMatch ? subjectMatch[1].trim() : 'Consulta general';\nlet description = descMatch ? descMatch[1].trim() : ticketData;\n\n// Si hay fileUrl, agregarlo a la descripciÃ³n\nif (fileUrl) {\n  description += `\\n\\nðŸ“Ž **Archivo adjunto:** ${fileUrl}`;\n}\n\n// Generar IDs Ãºnicos\nconst ticketId = `AURIN-${Date.now()}`;\nconst createdAt = new Date().toISOString();\n\nconsole.log('=== EXTRACTED DATA ===');\nconsole.log('Name:', name);\nconsole.log('Email:', email);\nconsole.log('Company:', company);\nconsole.log('Service:', service);\nconsole.log('Subject:', subject);\nconsole.log('Description:', description);\nconsole.log('FileUrl:', fileUrl);\nconsole.log('TicketId:', ticketId);\n\nreturn {\n  json: {\n    name: name,\n    email: email,\n    company: company,\n    service: service,\n    subject: subject,\n    description: description,\n    ticketId: ticketId,\n    createdAt: createdAt,\n    fileUrl: fileUrl\n  }\n};"
      },
      "id": "00205f02-3d54-46f5-b839-c46c6ff1ce80",
      "name": "Parse Ticket Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        -32
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://aurin.mx/api/send-ticket",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "name",
              "value": "={{ $json.name }}"
            },
            {
              "name": "email",
              "value": "={{ $json.email }}"
            },
            {
              "name": "company",
              "value": "={{ $json.company }}"
            },
            {
              "name": "service",
              "value": "={{ $json.service }}"
            },
            {
              "name": "subject",
              "value": "={{ $json.subject }}"
            },
            {
              "name": "description",
              "value": "={{ $json.description }}"
            },
            {
              "name": "ticketId",
              "value": "={{ $json.ticketId }}"
            },
            {
              "name": "createdAt",
              "value": "={{ $json.createdAt }}"
            },
            {
              "name": "fileUrl",
              "value": "={{ $json.fileUrl }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d360f240-cd3f-44ab-af09-bae7cfa39056",
      "name": "Send Ticket to API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1024,
        -32
      ]
    },
    {
      "parameters": {
        "jsCode": "// La API ya retorna el mensaje formateado y listo para el usuario\nconst apiResponse = $input.item.json;\n\n// Si la API retornÃ³ el mensaje de confirmaciÃ³n, usarlo\nif (apiResponse.output) {\n  return {\n    json: {\n      output: apiResponse.output,\n      success: apiResponse.success,\n      ticketId: apiResponse.ticketId,\n      emailSent: apiResponse.emailSent\n    }\n  };\n}\n\n// Fallback en caso de que la API no retorne el formato esperado\nconst ticketData = $('Parse Ticket Data').item.json;\nconst hasFile = ticketData.fileUrl ? ' Tu archivo adjunto ha sido incluido.' : '';\nconst serviceInfo = ticketData.service && ticketData.service !== 'No especificado' ? `\\n- Servicio: **${ticketData.service}**` : '';\n\nreturn {\n  json: {\n    output: `âœ… **Perfecto, ${ticketData.name}!**\\n\\nHe creado un ticket de soporte y nuestro equipo te contactarÃ¡ a **${ticketData.email}** muy pronto.${hasFile}\\n\\n**ðŸ“‹ Detalles de tu ticket:**\\n- NÃºmero de ticket: **${ticketData.ticketId}**\\n- Asunto: **${ticketData.subject}**${serviceInfo}\\n- Estado: En proceso\\n- Tiempo estimado de respuesta: 24 horas\\n\\n**ðŸ“§ Email de contacto:** [hey@aurin.mx](mailto:hey@aurin.mx)\\n\\nNos pondremos en contacto contigo dentro de las prÃ³ximas 24 horas para atender tu solicitud personalmente.\\n\\nÂ¿Hay algo mÃ¡s en lo que pueda ayudarte mientras tanto?`,\n    success: true,\n    ticketId: ticketData.ticketId,\n    emailSent: true,\n    customerName: ticketData.name,\n    customerEmail: ticketData.email,\n    customerService: ticketData.service,\n    customerSubject: ticketData.subject,\n    fileAttached: !!ticketData.fileUrl\n  }\n};"
      },
      "id": "387138d8-1c59-456c-bd14-d8ae93106d2d",
      "name": "Format Response for Bot",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1248,
        -32
      ]
    }
  ],
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Parse Ticket Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ticket Data": {
      "main": [
        [
          {
            "node": "Send Ticket to API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Ticket to API": {
      "main": [
        [
          {
            "node": "Format Response for Bot",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "d9e025c8-c48c-4e58-a956-ae9e95619eed",
  "triggerCount": 0,
  "tags": [],
  "parentFolder": null,
  "homeProject": {
    "id": "HQbRXXbJobpsoqYW",
    "type": "personal",
    "name": "Aurin   <karen@sodio.net>",
    "icon": null
  },
  "sharedWithProjects": [],
  "usedCredentials": [],
  "scopes": [
    "workflow:create",
    "workflow:delete",
    "workflow:execute",
    "workflow:list",
    "workflow:move",
    "workflow:read",
    "workflow:share",
    "workflow:update"
  ]
}
